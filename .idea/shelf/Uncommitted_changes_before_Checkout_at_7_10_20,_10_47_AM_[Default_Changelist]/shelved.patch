Index: backend/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.google.sps</groupId>\n  <artifactId>backend</artifactId>\n  <version>1</version>\n  <packaging>war</packaging>\n\n  <properties>\n    <!-- This project uses Java 8 -->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <failOnMissingWebXml>false</failOnMissingWebXml>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>4.0.1</version>\n      <scope>provided</scope>\n    </dependency>\n\t\t\n    <dependency>\n      <groupId>com.google.code.gson</groupId>\n      <artifactId>gson</artifactId>\n      <version>2.8.6</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.google.appengine</groupId>\n      <artifactId>appengine-api-1.0-sdk</artifactId>\n      <version>1.9.59</version>\n    </dependency>\n\n    <dependency>  \n      <groupId>com.googlecode.json-simple</groupId>  \n      <artifactId>json-simple</artifactId>  \n      <version>1.1</version>  \n    </dependency>\n      \n    <dependency>  \n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.google.truth</groupId>\n      <artifactId>truth</artifactId>\n      <version>1.0.1</version>\n      <scope>test</scope>\n    </dependency>\n    \n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>29.0-jre</version>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <!-- Provides `mvn package appengine:run` for local testing\n           and `mvn package appengine:deploy` for deploying. -->\n      <plugin>\n        <groupId>com.google.cloud.tools</groupId>\n        <artifactId>appengine-maven-plugin</artifactId>\n        <version>2.2.0</version>\n        <configuration>\n          <deploy.projectId>spontaneously</deploy.projectId>\n          <deploy.version>1</deploy.version>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>com.cosium.code</groupId>\n        <artifactId>git-code-format-maven-plugin</artifactId>\n        <version>2.5</version>\n        <executions>\n            <!-- On commit, format the modified java files -->\n            <execution>\n              <id>install-formatter-hook</id>\n              <goals>\n                <goal>install-hooks</goal>\n              </goals>\n            </execution>\n            <!-- On Maven verify phase, fail if any file\n            (including unmodified) is badly formatted -->\n            <execution>\n              <id>validate-code-format</id>\n              <goals>\n                <goal>validate-code-format</goal>\n              </goals>\n            </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/pom.xml	(revision 534fa948db01acf736a97f4838649daea14b4f6b)
+++ backend/pom.xml	(date 1594333630700)
@@ -41,7 +41,15 @@
       <artifactId>json-simple</artifactId>  
       <version>1.1</version>  
     </dependency>
-      
+
+    <!-- https://mvnrepository.com/artifact/com.google.apis/google-api-services-calendar -->
+    <dependency>
+      <groupId>com.google.apis</groupId>
+      <artifactId>google-api-services-calendar</artifactId>
+      <version>v3-rev411-1.25.0</version>
+    </dependency>
+
+
     <dependency>  
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
Index: backend/src/main/java/com/google/sps/eventsender/EventSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/src/main/java/com/google/sps/eventsender/EventSender.java	(date 1594391582952)
+++ backend/src/main/java/com/google/sps/eventsender/EventSender.java	(date 1594391582952)
@@ -0,0 +1,203 @@
+package com.google.sps.eventsender;
+
+import com.google.api.client.auth.oauth2.Credential;
+import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
+import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
+import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
+import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.api.client.json.JsonFactory;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import com.google.api.client.util.DateTime;
+import com.google.api.client.util.store.FileDataStoreFactory;
+import com.google.api.services.calendar.Calendar;
+import com.google.api.services.calendar.CalendarScopes;
+import com.google.api.services.calendar.model.*;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.security.GeneralSecurityException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+/** Instance of the class responsible for sending and adding events to user calendars */
+public class EventSender {
+
+  private static final String APPLICATION_NAME = "Ad-Lib";
+  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
+  private static final String TOKENS_DIRECTORY_PATH = "tokens";
+
+  /**
+   * Global instance of the scopes required by this quickstart. If modifying these scopes, delete
+   * your previously saved tokens/ folder.
+   */
+  private static final List<String> SCOPES = Collections.singletonList(CalendarScopes.CALENDAR);
+
+  private static final String CREDENTIALS_FILE_PATH = "/credentials.json";
+
+  /**
+   * Creates an authorized Credential object.
+   *
+   * @param HTTP_TRANSPORT The network HTTP Transport.
+   * @return An authorized Credential object.
+   * @throws IOException If the credentials.json file cannot be found.
+   */
+  private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT)
+      throws IOException {
+    // Load client secrets.
+    InputStream in = EventSender.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
+    if (in == null) {
+      throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
+    }
+    GoogleClientSecrets clientSecrets =
+        GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));
+
+    // Build flow and trigger user authorization request.
+    GoogleAuthorizationCodeFlow flow =
+        new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
+            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
+            .setAccessType("offline")
+            .build();
+    LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
+    return new AuthorizationCodeInstalledApp(flow, receiver).authorize("me");
+  }
+
+  /**
+   * TODO(): Convert from zonedTimeZone to DateTime
+   *
+   * @param meetingStartTime Time in which the meeting is designated to start at in the format
+   *     "yyyy-mm-dd"
+   * @param timezone String representing the Users Time Zone formatted as an IANA Time Zone Database
+   *     name, e.g. "Europe/Zurich".
+   * @return An EventDateTime with the input meeting time and input time zone.
+   */
+  public EventDateTime setMeetingStartTime(DateTime meetingStartTime, String timezone) {
+    return new EventDateTime().setDateTime(meetingStartTime).setTimeZone(timezone);
+  }
+
+  /**
+   * TODO(): Convert from zonedTimeZone to DateTime
+   *
+   * @param meetingEndTime Time in which the meeting is designated to end at in the format
+   *     "yyyy-mm-dd"
+   * @param timezone String representing the Users Time Zone formatted as an IANA Time Zone Database
+   *     name, e.g. "Europe/Zurich".
+   * @return An EventDateTime with the input meeting time and input time zone.
+   */
+  public EventDateTime setMeetingEndTime(DateTime meetingEndTime, String timezone) {
+    return new EventDateTime().setDateTime(meetingEndTime).setTimeZone(timezone);
+  }
+
+  /**
+   * @param participant1 Instance of the participant class representing an user in a successful
+   *     match
+   * @param participant2 Instance of a participant class representing a user in a successful match
+   * @return An array of EventAttendees with both of the participants emails pre set.
+   */
+  public EventAttendee[] createParticipantsArray(
+      com.google.sps.data.Participant participant1, com.google.sps.data.Participant participant2) {
+    return new EventAttendee[] {
+      new EventAttendee().setEmail(participant1.getUsername() + "@google.com"),
+      new EventAttendee().setEmail(participant2.getUsername() + "@google.com"),
+    };
+  }
+
+  /**
+   * Creates a notification trigger within the event so that the user will receive an email reminder
+   * in 5 minutes as wel as a push notification to their screen in 1 minute
+   *
+   * @return Returns these options of notifications to be passed into the event as parameters.
+   */
+  public Event.Reminders setReminderNotifications() {
+    EventReminder[] eventReminders = {
+      new EventReminder().setMethod("email").setMinutes(5),
+      new EventReminder().setMethod("popup").setMinutes(1)
+    };
+    return new Event.Reminders().setUseDefault(false).setOverrides(Arrays.asList(eventReminders));
+  }
+
+  /**
+   * TODO(): Currently assumes that the users will be within the same timezone. Main method of this
+   * API, creates an Ad-lib event ideally the moment that a match is found. Upon receiving the two
+   * participants as well as the meetingStart and meetingEndTime as well as their time zone
+   * configures the event as well as ads hangout link.
+   *
+   * @param participant1 First Participant that has been matched to someone
+   * @param participant2 Second Participant that has been matched to someone
+   * @param meetingStartTime Time in which the meeting is designated to start at in the format
+   *     "yyyy-mm-dd" *
+   * @param meetingEndTime Time in which the meeting is designated to end at in the format *
+   *     "yyyy-mm-dd"
+   * @param timezone Timezone that they plan to meet in.
+   * @return
+   */
+  public Event createAdLibEvent(
+      com.google.sps.data.Participant participant1,
+      com.google.sps.data.Participant participant2,
+      DateTime meetingStartTime,
+      DateTime meetingEndTime,
+      String timezone) {
+    return new Event()
+        .setSummary("Your Ad-lib Session")
+        .setDescription("A chance to spontaneously chat with a fellow Googler.")
+        .setStart(setMeetingStartTime(meetingStartTime, timezone))
+        .setEnd(setMeetingEndTime(meetingEndTime, timezone))
+            .setConferenceData()
+        .setReminders(setReminderNotifications())
+        .setConferenceData(createAdLibVideoMeeting())
+        .setAttendees(Arrays.asList(createParticipantsArray(participant1, participant2)));
+  }
+
+  /**
+   * Configures an Hangouts chat Meeting to be added to our Event.
+   *
+   * @return tHe ConferenceData Object
+   */
+  public ConferenceData createAdLibVideoMeeting() {
+    ConferenceData conferenceData = new ConferenceData();
+    CreateConferenceRequest conferenceRequest =
+        new CreateConferenceRequest().setRequestId("Ad-lib");
+    ConferenceSolution conferenceSolution =
+        new ConferenceSolution().setIconUri(null).setKey(new ConferenceSolutionKey());
+    EntryPoint entryPoint =
+        new EntryPoint()
+            .setEntryPointType("video")
+            .setLabel("meet.google.com/")
+            .setUri("http://meet.google.com/new");
+    ConferenceSolutionKey conferenceSolutionKey =
+        new ConferenceSolutionKey().setType("hangoutsMeet");
+    conferenceRequest
+        .setConferenceSolutionKey(conferenceSolutionKey)
+        .setStatus(new ConferenceRequestStatus());
+    conferenceData
+        .setEntryPoints(Collections.singletonList(entryPoint))
+        .setConferenceSolution(conferenceSolution)
+        .setCreateRequest(conferenceRequest);
+    return conferenceData;
+  }
+
+  /**
+   * @param event Event representing the Ad-lib session to be attended
+   * @throws IOException If the credentials folder is wrong
+   * @throws GeneralSecurityException In case of any other exceptions
+   */
+  public void addAdlibEventToCalendar(Event event) throws IOException, GeneralSecurityException {
+
+    // Build a new authorized API client service.
+    final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
+    Calendar service =
+        new Calendar.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
+            .setApplicationName(APPLICATION_NAME)
+            .build();
+
+    service
+        .events()
+        .insert(event.getAttendees().get(1).getEmail(), event)
+        .setConferenceDataVersion(1)
+        .execute();
+  }
+}
