Index: backend/src/main/java/com/google/sps/eventsender/EventSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.google.sps.eventsender;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\nimport com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.client.util.DateTime;\nimport com.google.api.client.util.store.FileDataStoreFactory;\nimport com.google.api.services.calendar.Calendar;\nimport com.google.api.services.calendar.CalendarScopes;\nimport com.google.api.services.calendar.model.*;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/** Instance of the class responsible for sending and adding events to user calendars */\npublic class EventSender {\n\n  private static final String APPLICATION_NAME = \"Ad-Lib\";\n  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n  private static final String TOKENS_DIRECTORY_PATH = \"tokens\";\n\n  /**\n   * Global instance of the scopes required by this quickstart. If modifying these scopes, delete\n   * your previously saved tokens/ folder.\n   */\n  private static final List<String> SCOPES = Collections.singletonList(CalendarScopes.CALENDAR);\n\n  private static final String CREDENTIALS_FILE_PATH = \"/credentials.json\";\n\n  /**\n   * Creates an authorized Credential object.\n   *\n   * @param HTTP_TRANSPORT The network HTTP Transport.\n   * @return An authorized Credential object.\n   * @throws IOException If the credentials.json file cannot be found.\n   */\n  private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT)\n      throws IOException {\n    // Load client secrets.\n    InputStream in = EventSender.class.getResourceAsStream(CREDENTIALS_FILE_PATH);\n    if (in == null) {\n      throw new FileNotFoundException(\"Resource not found: \" + CREDENTIALS_FILE_PATH);\n    }\n    GoogleClientSecrets clientSecrets =\n        GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));\n\n    // Build flow and trigger user authorization request.\n    GoogleAuthorizationCodeFlow flow =\n        new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)\n            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))\n            .setAccessType(\"offline\")\n            .build();\n    LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();\n    return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"me\");\n  }\n\n  /**\n   * TODO(): Convert from zonedTimeZone to DateTime\n   *\n   * @param meetingStartTime Time in which the meeting is designated to start at in the format\n   *     \"yyyy-mm-dd\"\n   * @param timezone String representing the Users Time Zone formatted as an IANA Time Zone Database\n   *     name, e.g. \"Europe/Zurich\".\n   * @return An EventDateTime with the input meeting time and input time zone.\n   */\n  public EventDateTime setMeetingStartTime(DateTime meetingStartTime, String timezone) {\n    return new EventDateTime().setDateTime(meetingStartTime).setTimeZone(timezone);\n  }\n\n  /**\n   * TODO(): Convert from zonedTimeZone to DateTime\n   *\n   * @param meetingEndTime Time in which the meeting is designated to end at in the format\n   *     \"yyyy-mm-dd\"\n   * @param timezone String representing the Users Time Zone formatted as an IANA Time Zone Database\n   *     name, e.g. \"Europe/Zurich\".\n   * @return An EventDateTime with the input meeting time and input time zone.\n   */\n  public EventDateTime setMeetingEndTime(DateTime meetingEndTime, String timezone) {\n    return new EventDateTime().setDateTime(meetingEndTime).setTimeZone(timezone);\n  }\n\n  /**\n   * @param participant1 Instance of the participant class representing an user in a successful\n   *     match\n   * @param participant2 Instance of a participant class representing a user in a successful match\n   * @return An array of EventAttendees with both of the participants emails pre set.\n   */\n  public EventAttendee[] createParticipantsArray(\n      com.google.sps.data.Participant participant1, com.google.sps.data.Participant participant2) {\n    return new EventAttendee[] {\n      new EventAttendee().setEmail(participant1.getUsername() + \"@google.com\"),\n      new EventAttendee().setEmail(participant2.getUsername() + \"@google.com\"),\n    };\n  }\n\n  /**\n   * Creates a notification trigger within the event so that the user will receive an email reminder\n   * in 5 minutes as wel as a push notification to their screen in 1 minute\n   *\n   * @return Returns these options of notifications to be passed into the event as parameters.\n   */\n  public Event.Reminders setReminderNotifications() {\n    EventReminder[] eventReminders = {\n      new EventReminder().setMethod(\"email\").setMinutes(5),\n      new EventReminder().setMethod(\"popup\").setMinutes(1)\n    };\n    return new Event.Reminders().setUseDefault(false).setOverrides(Arrays.asList(eventReminders));\n  }\n\n  /**\n   * TODO(): Currently assumes that the users will be within the same timezone.\n   *\n   * Main method of this\n   * API, creates an Ad-lib event ideally the moment that a match is found. Upon receiving the two\n   * participants as well as the meetingStart and meetingEndTime as well as their time zone\n   * configures the event as well as ads hangout link.\n   *\n   * @param participant1 First Participant that has been matched to someone\n   * @param participant2 Second Participant that has been matched to someone\n   * @param meetingStartTime Time in which the meeting is designated to start at in the format\n   *     \"yyyy-mm-dd\" *\n   * @param meetingEndTime Time in which the meeting is designated to end at in the format *\n   *     \"yyyy-mm-dd\"\n   * @param timezone Timezone that they plan to meet in.\n   * @return\n   */\n  public Event createAdLibEvent(\n      com.google.sps.data.Participant participant1,\n      com.google.sps.data.Participant participant2,\n      DateTime meetingStartTime,\n      DateTime meetingEndTime,\n      String timezone) {\n    return new Event()\n        .setSummary(\"Your Ad-lib Session\")\n        .setDescription(\"A chance to spontaneously chat with a fellow Googler.\")\n        .setStart(setMeetingStartTime(meetingStartTime, timezone))\n        .setEnd(setMeetingEndTime(meetingEndTime, timezone))\n        .setReminders(setReminderNotifications())\n        .setConferenceData(createAdLibVideoMeeting())\n        .setAttendees(Arrays.asList(createParticipantsArray(participant1, participant2)));\n  }\n\n  /**\n   * Configures an Hangouts chat Meeting to be added to our Event.\n   *\n   * @return tHe ConferenceData Object\n   */\n  public ConferenceData createAdLibVideoMeeting() {\n    ConferenceData conferenceData = new ConferenceData();\n    CreateConferenceRequest conferenceRequest =\n        new CreateConferenceRequest().setRequestId(\"Ad-lib\");\n    ConferenceSolution conferenceSolution =\n        new ConferenceSolution().setIconUri(null).setKey(new ConferenceSolutionKey());\n    EntryPoint entryPoint =\n        new EntryPoint()\n            .setEntryPointType(\"video\")\n            .setLabel(\"meet.google.com/\")\n            .setUri(\"http://meet.google.com/new\");\n    ConferenceSolutionKey conferenceSolutionKey =\n        new ConferenceSolutionKey().setType(\"hangoutsMeet\");\n    conferenceRequest\n        .setConferenceSolutionKey(conferenceSolutionKey)\n        .setStatus(new ConferenceRequestStatus());\n    conferenceData\n        .setEntryPoints(Collections.singletonList(entryPoint))\n        .setConferenceSolution(conferenceSolution)\n        .setCreateRequest(conferenceRequest);\n    return conferenceData;\n  }\n\n  /**\n   * @param event Event representing the Ad-lib session to be attended\n   * @throws IOException If the credentials folder is wrong\n   * @throws GeneralSecurityException In case of any other exceptions\n   */\n  public void addAdlibEventToCalendar(Event event) throws IOException, GeneralSecurityException {\n\n    // Build a new authorized API client service.\n    final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n    Calendar service =\n        new Calendar.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))\n            .setApplicationName(APPLICATION_NAME)\n            .build();\n\n    service\n        .events()\n        .insert(event.getAttendees().get(1).getEmail(), event)\n        .setConferenceDataVersion(1)\n        .execute();\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/src/main/java/com/google/sps/eventsender/EventSender.java	(revision 5882102e589558884a41545643137f41fd723e30)
+++ backend/src/main/java/com/google/sps/eventsender/EventSender.java	(date 1594400403561)
@@ -120,6 +120,34 @@
     return new Event.Reminders().setUseDefault(false).setOverrides(Arrays.asList(eventReminders));
   }
 
+  /**
+   * Configures an Hangouts chat Meeting to be added to our Event.
+   *
+   * @return tHe ConferenceData Object
+   */
+  public ConferenceData createAdLibVideoMeeting() {
+    ConferenceData conferenceData = new ConferenceData();
+    CreateConferenceRequest conferenceRequest =
+            new CreateConferenceRequest().setRequestId("Ad-lib");
+    ConferenceSolution conferenceSolution =
+            new ConferenceSolution().setIconUri(null).setKey(new ConferenceSolutionKey());
+    EntryPoint entryPoint =
+            new EntryPoint()
+                    .setEntryPointType("video")
+                    .setLabel("meet.google.com/")
+                    .setUri("http://meet.google.com/new");
+    ConferenceSolutionKey conferenceSolutionKey =
+            new ConferenceSolutionKey().setType("hangoutsMeet");
+    conferenceRequest
+            .setConferenceSolutionKey(conferenceSolutionKey)
+            .setStatus(new ConferenceRequestStatus());
+    conferenceData
+            .setEntryPoints(Collections.singletonList(entryPoint))
+            .setConferenceSolution(conferenceSolution)
+            .setCreateRequest(conferenceRequest);
+    return conferenceData;
+  }
+
   /**
    * TODO(): Currently assumes that the users will be within the same timezone.
    *
@@ -153,34 +181,6 @@
         .setAttendees(Arrays.asList(createParticipantsArray(participant1, participant2)));
   }
 
-  /**
-   * Configures an Hangouts chat Meeting to be added to our Event.
-   *
-   * @return tHe ConferenceData Object
-   */
-  public ConferenceData createAdLibVideoMeeting() {
-    ConferenceData conferenceData = new ConferenceData();
-    CreateConferenceRequest conferenceRequest =
-        new CreateConferenceRequest().setRequestId("Ad-lib");
-    ConferenceSolution conferenceSolution =
-        new ConferenceSolution().setIconUri(null).setKey(new ConferenceSolutionKey());
-    EntryPoint entryPoint =
-        new EntryPoint()
-            .setEntryPointType("video")
-            .setLabel("meet.google.com/")
-            .setUri("http://meet.google.com/new");
-    ConferenceSolutionKey conferenceSolutionKey =
-        new ConferenceSolutionKey().setType("hangoutsMeet");
-    conferenceRequest
-        .setConferenceSolutionKey(conferenceSolutionKey)
-        .setStatus(new ConferenceRequestStatus());
-    conferenceData
-        .setEntryPoints(Collections.singletonList(entryPoint))
-        .setConferenceSolution(conferenceSolution)
-        .setCreateRequest(conferenceRequest);
-    return conferenceData;
-  }
-
   /**
    * @param event Event representing the Ad-lib session to be attended
    * @throws IOException If the credentials folder is wrong
