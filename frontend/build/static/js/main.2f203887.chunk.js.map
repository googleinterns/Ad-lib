{"version":3,"sources":["menu-bar.js","form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","aria-controls","color","margin","formControl","minWidth","textField","divStyle","display","alignItems","Form","TextField","id","label","type","defaultValue","FormControl","NativeSelect","name","inputProps","value","Button","contentStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAQMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAKC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,UAIE,6BACE,kBAACS,EAAA,EAAD,CACEC,aAAW,YACXC,gBAAc,cACdC,MAAM,WAEN,kBAAC,IAAD,W,uCC/BVpB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJkB,OAAQnB,EAAMK,QAAQ,IAExBe,YAAa,CACXD,OAAQnB,EAAMK,QAAQ,GACtBgB,SAAU,KAEZC,UAAW,CACTH,OAAQnB,EAAMK,QAAQ,IAExBkB,SAAU,CACRC,QAAS,OACTC,WAAY,WACZN,OAAQnB,EAAMK,QAAQ,QAKX,SAASqB,IACtB,IAAMlB,EAAUV,IAEhB,OACE,6BACE,yBAAKW,UAAWD,EAAQe,UACtB,gDACA,kBAACI,EAAA,EAAD,CAAWlB,UAAWD,EAAQc,UAC5BM,GAAG,OACHC,MAAM,gBACNC,KAAK,OACLC,aAAa,WAEjB,yBAAKtB,UAAWD,EAAQe,UACtB,oDACA,kBAACS,EAAA,EAAD,CAAavB,UAAWD,EAAQY,aAC9B,kBAACa,EAAA,EAAD,CACEL,GAAG,iBACHM,KAAK,WACLC,WAAY,CAAE,aAAc,aAE5B,4BAAQC,MAAO,IAAf,cACA,4BAAQA,MAAO,IAAf,cACA,4BAAQA,MAAO,IAAf,cACA,4BAAQA,MAAO,IAAf,iBAIN,yBAAK3B,UAAWD,EAAQP,MACtB,kBAACoC,EAAA,EAAD,CAAQvB,QAAQ,YAAYI,MAAM,WAAlC,YCjDR,IAAMpB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCsC,aAAc,CACZnB,OAAQnB,EAAMK,QAAQ,QAwBXkC,MAnBf,WACE,IAAM/B,EAAUV,IAEhB,OACE,6BACI,kBAAC,EAAD,MACA,yBAAKW,UAAWD,EAAQ8B,cACtB,oDAAyB,mCAAzB,KACA,yJAEA,uSAIF,kBAACZ,EAAD,QCfYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f203887.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\n// Create menu bar component with title and help icon\nexport default function MenuAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Ad-lib\n          </Typography>\n          {\n            <div>\n              <IconButton\n                aria-label=\"help-icon\"\n                aria-controls=\"help-appbar\"\n                color=\"inherit\"\n              >\n                <HelpIcon />\n              </IconButton>\n            </div>\n          }\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120\n  },\n  textField: {\n    margin: theme.spacing(2)\n  },\n  divStyle: {\n    display: 'flex',\n    alignItems: 'flex-end',\n    margin: theme.spacing(2)\n  }\n}));\n\n// Create basic form component with two fields and submit button\nexport default function Form() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className={classes.divStyle}>\n        <p>I'm free until...</p>\n        <TextField className={classes.textField}\n          id=\"time\"\n          label=\"Select a time\"\n          type=\"time\"\n          defaultValue=\"09:30\"/>\n      </div>\n      <div className={classes.divStyle}>\n        <p>I want to talk for...</p>\n        <FormControl className={classes.formControl}>\n          <NativeSelect\n            id=\"duration-input\"\n            name=\"duration\"\n            inputProps={{ \"aria-label\": \"duration\" }}\n          >\n            <option value={15}>15 minutes</option>\n            <option value={30}>30 minutes</option>\n            <option value={45}>45 minutes</option>\n            <option value={60}>60 minutes</option>\n          </NativeSelect>\n        </FormControl>\n      </div>\n      <div className={classes.root}>\n        <Button variant=\"contained\" color=\"primary\">\n          Submit\n        </Button>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport './App.css';\nimport MenuBar from './menu-bar.js';\nimport Form from './form.js'\n\nconst useStyles = makeStyles(theme => ({\n  contentStyle: {\n    margin: theme.spacing(2)\n  }\n}));\n\n// Add components and content to UI\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n        <MenuBar />\n        <div className={classes.contentStyle}>\n          <h1>Meet fellow Googlers <em>now</em>!</h1>\n          <h4>Miss bumping into new faces at the office? Want an easy, fun, spontaneous way of meeting \n              Googlers virtually? Now you can!</h4>\n          <h4>Ad-lib matches you with a fellow Googler in the queue, notifies you through email when \n              youâ€™ve been matched, and adds an event to your Calendar with a Meet link for you to \n              join immediately! It also provides a starter question to get the conversation flowing!</h4>\n        </div>\n        <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}