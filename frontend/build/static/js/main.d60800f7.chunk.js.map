{"version":3,"sources":["components/MenuBar.js","components/MatchPreference.js","components/PreferencesCheckbox.js","components/RoleDropdown.js","components/YearsDropdown.js","components/ProductAreaDropdown.js","components/DurationDropdown.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","aria-controls","color","MatchPreference","props","FormControl","component","RadioGroup","row","name","defaultValue","onChange","event","target","value","FormControlLabel","control","Radio","label","PreferencesCheckbox","labelPlacement","Checkbox","checked","defaultChecked","roles","RoleDropdown","style","width","InputLabel","id","Select","inputProps","map","currentRole","MenuItem","key","ListItemText","primary","yearRanges","YearDropdown","currentYearRange","productAreas","ProductAreaDropdown","currentProductArea","durations","DurationDropdown","NativeSelect","currentDuration","flexStartDiv","display","alignItems","justifyContent","margin","flexEndDiv","marginTop","marginBottom","section","heading","marginLeft","padding","Form","React","useState","Date","timeAvailableUntil","setTimeAvailableUntil","duration","setDuration","productArea","setProductArea","role","setRole","yearRange","setYearRange","savePreference","setSavePreference","matchPreference","setMatchPreference","utils","DateFnsUtils","KeyboardButtonProps","Button","onClick","alert","centerHorizontal","left","transform","content","App","Card","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d60800f7.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport HelpIcon from '@material-ui/icons/Help';\n\n/**\n * Establishes style to use on rendering menu bar component\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n/**\n * Create menu bar component with title and help icon\n * @return {MenuBar} MenuBar component\n */\nexport default function MenuAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Ad-lib\n          </Typography>\n          {\n            <div>\n              <IconButton\n                aria-label=\"help-icon\"\n                aria-controls=\"help-appbar\"\n                color=\"inherit\"\n              >\n                <HelpIcon />\n              </IconButton>\n            </div>\n          }\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\n// Add onChange to props validation\nMatchPreference.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create match preference radio group component\n * @return {MatchPreference} MatchPreference component\n * @param {Object} props\n */\nexport default function MatchPreference(props) {\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        row\n        aria-label=\"matchPreference\"\n        name=\"matchPreference\"\n        defaultValue=\"none\"\n        onChange={(event) => props.onChange(event.target.value)}\n      >\n        <FormControlLabel\n          value=\"similar\"\n          control={<Radio color=\"primary\" />}\n          label=\"Similar Googler\" />\n        <FormControlLabel\n          value=\"none\"\n          control={<Radio color=\"primary\" />}\n          label=\"No Preference\" />\n        <FormControlLabel\n          value=\"different\"\n          control={<Radio color=\"primary\" />}\n          label=\"Different Googler\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// Add onChange to props validation\nPreferencesCheckbox.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create checkbox component for input on saving preferences for future use\n * @return {PreferencesCheckbox} PreferencesCheckbox component\n * @param {Object} props\n */\nexport default function PreferencesCheckbox(props) {\n  return (\n    <FormControlLabel\n      label=\"Save my preferences for later\"\n      labelPlacement=\"start\"\n      control={\n        <Checkbox\n          onChange={(event) => props.onChange(event.target.checked)}\n          name=\"checkbox\"\n          color=\"primary\"\n          defaultChecked=\"true\"\n        />\n      }\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\n\n// TO-DO: Add more role options to this array\nconst roles = [\n  'Software Engineer',\n  'Product Manager',\n  'UI/UX Designer',\n  'Recruiter',\n  'Intern',\n  'VP',\n  'Director',\n  'CEO',\n];\n\n// Add onChange to props validation\nRoleDropdown.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create role dropdown component using roles array\n * @return {RoleDropdown} RoleDropdown component\n * @param {Object} props\n */\nexport default function RoleDropdown(props) {\n  return (\n    <div>\n      <FormControl style={{width: 180}}>\n        <InputLabel id=\"role\">Role</InputLabel>\n        <Select\n          id=\"role-input\"\n          name=\"role\"\n          onChange={(event) => props.onChange(event.target.value)}\n          inputProps={{'aria-label': 'role'}}\n        >\n          {roles.map((currentRole) => (\n            <MenuItem key={currentRole} value={currentRole}>\n              <ListItemText primary={currentRole} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\n\nconst yearRanges = [\n  '0-5 years',\n  '6-10 years',\n  '11-15 years',\n  '16-20 years',\n  '20+ years',\n];\n\n// Add onChange to props validation\nYearDropdown.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create year dropdown component using yearRanges array\n * @return {YearDropdown} YearDropdown component\n * @param {Object} props\n */\nexport default function YearDropdown(props) {\n  return (\n    <div>\n      <FormControl style={{width: 180}}>\n        <InputLabel id=\"year-range\">Years@</InputLabel>\n        <Select\n          id=\"year-range-input\"\n          name=\"year-range\"\n          onChange={(event) => props.onChange(event.target.value)}\n          inputProps={{'aria-label': 'year-range'}}\n        >\n          {yearRanges.map((currentYearRange) => (\n            <MenuItem key={currentYearRange} value={currentYearRange}>\n              <ListItemText primary={currentYearRange} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\n\n// TO-DO: Add more product area options to this array\nconst productAreas = [\n  'Play',\n  'Search',\n  'Ads',\n  'Youtube',\n  'Maps',\n];\n\n// Add onChange to props validation\nProductAreaDropdown.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create product area dropdown component using productAreas array\n * @return {ProductAreaDropdown} ProductAreaDropdown component\n * @param {Object} props\n */\nexport default function ProductAreaDropdown(props) {\n  return (\n    <div>\n      <FormControl style={{width: 180}}>\n        <InputLabel id=\"productArea\">Product Area</InputLabel>\n        <Select\n          id=\"productArea-input\"\n          name=\"productArea\"\n          onChange={(event) => props.onChange(event.target.value)}\n          inputProps={{'aria-label': 'productArea'}}\n        >\n          {productAreas.map((currentProductArea) => (\n            <MenuItem key={currentProductArea} value={currentProductArea}>\n              <ListItemText primary={currentProductArea} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\n\nconst durations = [\n  {label: '15 minutes', value: 15},\n  {label: '30 minutes', value: 30},\n  {label: '45 minutes', value: 45},\n  {label: '60 minutes', value: 60},\n];\n\n// Add onChange to props validation\nDurationDropdown.propTypes = {\n  onChange: PropTypes.func,\n};\n\n/**\n * Create duration dropdown component using durations array\n * @return {DurationDropdown} DurationDropdown component\n * @param {Object} props\n */\nexport default function DurationDropdown(props) {\n  return (\n    <div>\n      <FormControl style={{width: 180}}>\n        <NativeSelect\n          id=\"duration-input\"\n          name=\"duration\"\n          onChange={(event) => props.onChange(event.target.value)}\n          inputProps={{'aria-label': 'duration'}}\n        >\n          {durations.map((currentDuration) => (\n            <option key={currentDuration.label} value={currentDuration.value}>\n              {currentDuration.label}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {MuiPickersUtilsProvider,\n  KeyboardTimePicker} from '@material-ui/pickers';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MatchPreference from './MatchPreference';\nimport Checkbox from './PreferencesCheckbox';\nimport RoleDropdown from './RoleDropdown';\nimport YearDropdown from './YearsDropdown';\nimport ProductAreaDropdown from './ProductAreaDropdown';\nimport DurationDropdown from './DurationDropdown';\n\n/**\n * Establishes style to use on rendering form component\n */\nconst useStyles = makeStyles((theme) => ({\n  flexStartDiv: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    margin: theme.spacing(2),\n  },\n  flexEndDiv: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  section: {\n    margin: theme.spacing(2),\n    width: 650,\n  },\n  heading: {\n    marginLeft: theme.spacing(2),\n  },\n  padding: {\n    marginTop: theme.spacing(4),\n    marginLeft: theme.spacing(2),\n  },\n}));\n\n/**\n * Create form component with time and match preference inputs\n * @return {Form} Form component\n */\nexport default function Form() {\n  const classes = useStyles();\n\n  // Declare state variables for each input field and set default states\n  const [timeAvailableUntil, setTimeAvailableUntil] =\n    React.useState(new Date());\n  const [duration, setDuration] = React.useState(15);\n  const [productArea, setProductArea] = React.useState('');\n  const [role, setRole] = React.useState('');\n  const [yearRange, setYearRange] = React.useState('');\n  const [savePreference, setSavePreference] = React.useState(true);\n  const [matchPreference, setMatchPreference] = React.useState('none');\n\n  return (\n    <div>\n      <div className={classes.heading}>\n        <h3>Choose your time preferences</h3>\n      </div>\n      <div className={classes.section}>\n        <div className={classes.flexStartDiv}>\n          <p>I am free until...</p>\n          <div style={{width: 180}}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardTimePicker\n                id=\"time-field\"\n                value={timeAvailableUntil}\n                onChange={(value) => setTimeAvailableUntil(value)}\n                KeyboardButtonProps={{'aria-label': 'time-field'}}\n              />\n            </MuiPickersUtilsProvider>\n          </div>\n        </div>\n        <div className={classes.flexStartDiv}>\n          <p>I want to talk for...</p>\n          <DurationDropdown onChange={(value) => setDuration(value)} />\n        </div>\n      </div>\n      <div className={classes.heading}>\n        <h3>Choose your match preferences</h3>\n      </div>\n      <div className={classes.section}>\n        <div className={classes.flexStartDiv}>\n          <RoleDropdown onChange={(value) => setRole(value)} />\n          <ProductAreaDropdown onChange={(value) => setProductArea(value)} />\n          <YearDropdown onChange={(value) => setYearRange(value)} />\n        </div>\n        <div className={classes.padding}>\n          <MatchPreference onChange={(value) => setMatchPreference(value)} />\n        </div>\n      </div>\n      <div className={classes.flexEndDiv}>\n        <Checkbox onChange={(value) => setSavePreference(value)} />\n        <div className={classes.flexEndDiv}>\n          { /* TO-DO: change alert to JSON object and send to backend */ }\n          <Button variant=\"contained\" color=\"primary\" onClick={() => {\n            alert('Availability: ' + timeAvailableUntil + '\\nDuration: ' +\n            duration + '\\nRole: ' + role + '\\nPA: ' + productArea +\n            '\\nYears: ' + yearRange + '\\nSave: ' + savePreference +\n            '\\nMatch: ' + matchPreference);\n          }}>\n            Submit\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport './App.css';\nimport MenuBar from './components/MenuBar.js';\nimport Form from './components/Form.js';\n\n/**\n * Establishes style to use on rendering components\n */\nconst useStyles = makeStyles((theme) => ({\n  centerHorizontal: {\n    position: 'absolute', left: '50%',\n    transform: 'translate(-50%)',\n  },\n  content: {\n    margin: theme.spacing(2),\n    width: 800,\n  },\n}));\n\n/**\n * Add components and content to UI\n * @return {App} App component\n */\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <MenuBar />\n      <div className={classes.centerHorizontal}>\n        <Card className={classes.content}>\n          <CardContent>\n            <h2>Meet fellow Googlers <em>now</em>!</h2>\n            <h4>Miss bumping into new faces at the office? Want an easy, fun,\n               spontaneous way of meeting Googlers virtually? Now you can!</h4>\n            <h4>Ad-lib matches you with a fellow Googler in the queue, notifies\n               you through email when you’ve been matched, and adds an event to\n               your Calendar with a Meet link for you to join immediately! It\n               also provides a starter question to get the conversation\n               flowing!</h4>\n          </CardContent>\n        </Card>\n        <Card className={classes.content}>\n          <Form />\n        </Card>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\n/**\n * Function that defines how to register a service worker\n * @param {Config} config\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Function that defines how to a valid service worker is registered\n * @param {string} swUrl\n * @param {Config} config\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\n/**\n * Function that verfies the validity of a service worker\n * @param {string} swUrl\n * @param {Config} config\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\n/**\n * Function that unregisters a service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}